import type { EnqueueSnackbar as EnqueueSnackbarT, OptionsObject as OptionsObjectT } from "notistack";
import type { NamedExoticComponent as NamedExoticComponentT, ForwardRefExoticComponent as ForwardRefExoticComponentT, Context as ContextT } from "react";
import type { Flipped as FlippedT, Flipper as FlipperT } from "react-flip-toolkit";
import type { SnackbarProvider as SnackbarProviderT, useSnackbar as useSnackbarT } from "notistack";
import type SnackbarT from "notistack";
import type ReactT from "react";
import type ReactDOMT from "react-dom";
import type ReactDOMServerT from "react-dom/server";
import type classNamesT from "classnames";
import type { QueryClient as QueryClientT, QueryClientProvider as QueryClientProviderT, notifyManager as notifyManagerT, useMutation as useMutationT, useQuery as useQueryT, useQueryClient as useQueryClientT, useSuspenseQuery as useSuspenseQueryT, useInfiniteQuery as useInfiniteQueryT } from "@tanstack/react-query";
import type MousetrapT from "mousetrap";
export type EnqueueSnackbar = EnqueueSnackbarT;
export type OptionsObject = OptionsObjectT;
export type NamedExoticComponent = NamedExoticComponentT;
export type ForwardRefExoticComponent<P> = ForwardRefExoticComponentT<P>;
export type Context<T> = ContextT<T>;
export type Flipped = typeof FlippedT;
export type Flipper = FlipperT;
export type SnackbarProvider = SnackbarProviderT;
export type useSnackbar = typeof useSnackbarT;
export type Snackbar = typeof SnackbarT;
export type React = typeof ReactT;
export type ReactDOM = typeof ReactDOMT;
export type ReactDOMServer = typeof ReactDOMServerT;
export type classNames = typeof classNamesT;
export type QueryClient = QueryClientT;
export type QueryClientProvider = typeof QueryClientProviderT;
export type notifyManager = typeof notifyManagerT;
export type useMutation = typeof useMutationT;
export type useQuery = typeof useQueryT;
export type useQueryClient = typeof useQueryClientT;
export type useSuspenseQuery = typeof useSuspenseQueryT;
export type useInfiniteQuery = typeof useInfiniteQueryT;
export type Mousetrap = typeof MousetrapT;
import type { Platform } from "./platform.js";
type ParsableAsURI = any;
type IsThisURIType<A extends keyof URITypes> = (url: ParsableAsURI) => url is URIClass<A>;
export type URIClass<A extends keyof URITypes> = any;
export type URITypes = {
    AD: "ad";
    ALBUM: "album";
    GENRE: "genre";
    QUEUE: "queue";
    APPLICATION: "application";
    ARTIST: "artist";
    ARTIST_TOPLIST: "artist-toplist";
    ARTIST_CONCERTS: "artist-concerts";
    AUDIO_FILE: "audiofile";
    COLLECTION: "collection";
    COLLECTION_ALBUM: "collection-album";
    COLLECTION_ARTIST: "collection-artist";
    COLLECTION_MISSING_ALBUM: "collection-missing-album";
    COLLECTION_TRACK_LIST: "collectiontracklist";
    CONCEPT: "concept";
    CONCERT: "concert";
    CONTEXT_GROUP: "context-group";
    CULTURAL_MOMENT: "cultural-moment";
    DAILY_MIX: "dailymix";
    EMPTY: "empty";
    EPISODE: "episode";
    FACEBOOK: "facebook";
    FOLDER: "folder";
    FOLLOWERS: "followers";
    FOLLOWING: "following";
    IMAGE: "image";
    INBOX: "inbox";
    INTERRUPTION: "interruption";
    LIBRARY: "library";
    LIVE: "live";
    ROOM: "room";
    EXPRESSION: "expression";
    LOCAL: "local";
    LOCAL_TRACK: "local";
    LOCAL_ALBUM: "local-album";
    LOCAL_ARTIST: "local-artist";
    MERCH: "merch";
    MERCHHUB: "merchhub";
    MOSAIC: "mosaic";
    PLAYLIST: "playlist";
    PLAYLIST_V2: "playlist-v2";
    PRERELEASE: "prerelease";
    PROFILE: "profile";
    PUBLISHED_ROOTLIST: "published-rootlist";
    RADIO: "radio";
    ROOTLIST: "rootlist";
    SEARCH: "search";
    SHOW: "show";
    SOCIAL_SESSION: "socialsession";
    SPECIAL: "special";
    STARRED: "starred";
    STATION: "station";
    TEMP_PLAYLIST: "temp-playlist";
    TOPLIST: "toplist";
    TRACK: "track";
    TRACKSET: "trackset";
    USER_TOPLIST: "user-toplist";
    USER_TOP_TRACKS: "user-top-tracks";
    UNKNOWN: "unknown";
    VIDEO: "video";
    MEDIA: "media";
    QUESTION: "question";
    POLL: "poll";
    RESPONSE: "response";
    COURSE: "course";
    LESSON: "lesson";
    CANVAS: "canvas";
};
export type ExposedWebpack = ReturnType<typeof expose>;
export declare function expose({ Snackbar, Platform }: {
    Snackbar: Snackbar;
    Platform: Platform;
}): {
    webpack: {
        require: any;
        chunks: [string, unknown][];
        modules: any[];
        exports: any[];
        exportedFunctions: Function[];
        exportedContexts: Context<any>[];
        exportedForwardRefs: ForwardRefExoticComponent<any>[];
        exportedMemos: NamedExoticComponent[];
    };
    useMatch: unknown;
    getPlayContext: Function;
    FilterContext: Context<any>;
    useContextMenuState: Function;
    enqueueCustomSnackbar: (element: ReactT.ReactElement<any, string | ReactT.JSXElementConstructor<any>>, opts: any) => ReturnType<EnqueueSnackbar>;
    React: typeof ReactT;
    ReactJSX: any;
    ReactDOM: typeof ReactDOMT;
    ReactDOMServer: any;
    classnames: any;
    Color: Function & {
        CSSFormat: any;
    };
    ReactComponents: {
        SnackbarProvider: SnackbarProviderT;
        SettingColumn: ReactT.FC<any>;
        SettingText: ReactT.FC<any>;
        SettingToggle: ReactT.FC<any>;
        IconComponent: ReactT.FC<any>;
        Text: ForwardRefExoticComponent<any>;
        TextComponent: any;
        ContextMenu: unknown;
        RightClickMenu: ReactT.FC<any>;
        ConfirmDialog: ReactT.FC<any>;
        Tooltip: ReactT.FC<any>;
        Menu: ReactT.FC<any>;
        MenuItem: ReactT.FC<any>;
        MenuItemSubMenu: ReactT.FC<any>;
        Slider: ReactT.FC<any>;
        Nav: NamedExoticComponent;
        NavTo: NamedExoticComponent;
        RemoteConfigProvider: ({ configuration, children }: {
            configuration?: {
                accessListeners: Set<any>;
                getValue: () => any;
                toBuilder: () => any;
                toJSON: () => any;
                values: Map<any, any>;
            };
            children: any;
        }) => ReactT.FunctionComponentElement<any>;
        Scrollable: ReactT.FC<any>;
        PanelHeader: ReactT.FC<any>;
        PanelContent: ForwardRefExoticComponent<any> | ReactT.FC<any>;
        PanelSkeleton: ForwardRefExoticComponent<any> | ReactT.FC<any>;
        ButtonPrimary: ForwardRefExoticComponent<any>;
        ButtonSecondary: ForwardRefExoticComponent<any>;
        ButtonTertiary: ForwardRefExoticComponent<any>;
        Snackbar: {
            wrapper: ReactT.FC<any>;
            simpleLayout: ReactT.FC<any>;
            ctaText: ReactT.FC<any>;
            styledImage: ReactT.FC<any>;
        };
        Chip: ForwardRefExoticComponent<any>;
        Toggle: ReactT.FC<any>;
        Router: ReactT.FC<any>;
        Routes: ReactT.FC<any>;
        Route: ReactT.FC<any>;
        StoreProvider: ReactT.FC<any>;
        Cards: any;
        Menus: any;
        PlaylistMenu: unknown;
        GenericModal: ReactT.FC<any>;
        Tracklist: NamedExoticComponent;
        TracklistRow: NamedExoticComponent;
        TracklistColumnsContextProvider: Function;
    };
    ReactHooks: {
        DragHandler: Function;
        useExtractedColor: Function;
    };
    ReactQuery: {
        PersistQueryClientProvider: Function;
        QueryClient: QueryClientT;
        QueryClientProvider: any;
        notifyManager: any;
        useMutation: any;
        useQuery: any;
        useQueryClient: any;
        useSuspenseQuery: any;
        useInfiniteQuery: any;
    };
    ReactFlipToolkit: {
        Flipper: FlipperT;
        Flipped: any;
    };
    useSnackbar: any;
    _reservedPanelIds: Record<string, number>;
    Mousetrap: MousetrapT.MousetrapStatic;
    Locale: any;
    createUrlLocale: Function;
    Snackbar: any;
    URI: {
        Types: URITypes;
        isSameIdentity: (a: any, b: any) => boolean;
        urlEncode: (str: string) => string;
        idToHex: (str: string) => string;
        hexToId: (str: string) => string;
        from: (uri: any) => any;
        fromString: (str: string) => any;
        is: {
            Ad: IsThisURIType<any>;
            Album: IsThisURIType<any>;
            Application: IsThisURIType<any>;
            Artist: IsThisURIType<any>;
            CollectionAlbum: IsThisURIType<any>;
            CollectionArtist: IsThisURIType<any>;
            Collection: IsThisURIType<any>;
            Concert: IsThisURIType<any>;
            Episode: IsThisURIType<any>;
            Folder: IsThisURIType<any>;
            LocalTrack: IsThisURIType<any>;
            Playlist: IsThisURIType<any>;
            PlaylistV2: IsThisURIType<any>;
            Profile: IsThisURIType<any>;
            Radio: IsThisURIType<any>;
            Show: IsThisURIType<any>;
            SocialSession: IsThisURIType<any>;
            Station: IsThisURIType<any>;
            Track: IsThisURIType<any>;
        } & {
            PlaylistV1OrV2: IsThisURIType<any>;
        };
        create: {
            Album: any;
            Application: any;
            Artist: any;
            CollectionAlbum: any;
            CollectionArtist: any;
            Collection: any;
            Concert: any;
            Episode: any;
            Folder: any;
            LocalAlbum: any;
            LocalArtist: any;
            PlaylistV2: any;
            Prerelease: any;
            Profile: any;
            Queue: any;
            Search: any;
            Show: any;
            SocialSession: any;
            Station: any;
            Track: any;
            UserToplist: any;
        };
    };
    extractColorPreset: (image: any) => Promise<any>;
};
export {};
